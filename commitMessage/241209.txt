shortestPath/1504.cpp ★기억에 남는 문제 graphTheory shortestPath 
https://www.acmicpc.net/problem/1504
------
  문제 해결 아이디어
1번 정점에서 N번 정점으로 이동할 때 문제에서 주어진 v1, v2를 거쳐야 한다.

1, v1, v2, n 순서로 이동할 때와,
1, v2, v1, n 순서로 이동할 때의 두가지 경우의 경로가 있다.
두 경로의 dist를 구하고, 둘 중 최소 값이 최단 경로가 된다.
이 때 조건은 그러한 경로가 없을때는 -1을 출력해야 한다.

1, v1, v2, n 순서로 이동할 때의 거리를 구하는 법은
dijkstra 알고리즘을 사용해 1 - v1, v1 - v2, v2 - n의 거리를 각각 구할 수 있고,
모두 더하면 1, v1, v2, n 순서로 이동할 때의 거리를 구할 수 있다.

1, v2, v1, n 순서로 이동할 때의 거리는 위와 비슷하게
1 - v2, v2 - v1, v1 - n의 거리를 구해 모두 더하면 된다.

만약 위에서 구한 모든 중간 경로 중에서 불가능한 경로가 있다면
1에서 n으로 갈 때 그 중간 경로가 존재하지 않는 것이므로
중간 경로들을 더할 때 조건식으로 -1로 만들어 주면 된다.
------
  피드백
priority_queue의 compare 인자에 less<> 대신 greater<>를 사용했을 때 300ms에서 44ms로 실행 시간이 줄어들었다.
이해가 잘 안되어 프로그램 작동을 이해하기 위한 출력을 추가했고, 그 결과인 맨 밑의 이해를 위한 실행 결과를 보고 이해했다.
결론부터 말하자면 compare에 인자를 사용할 때 enque 방향이 앞, deque 방향을 뒤로 생각해야 된다.
밑의 내용들은 단순히 다시 외우면 되지만 priority_queue를 더 이해하고 싶어서 정리 하던 것을 마치고 싶었다.
------
  이해하고자 했던 과정
결론부터 말하면
greater<>를 사용하면 top()에서 enque 방향으로 오름차순 정렬이 된다. enque 방향에서 deque 방향으로는 내림차순 정렬이 된다.
less<>를 사용하면 top()에서 enque 방향으로 내림차순 정렬이 된다. enque 방향에서 deque 방향으로는 오름차순 정렬이 된다.
priority_queue는 deque 방향이 앞쪽일 것이라 생각했던 것과 달리 enque 방향이 앞쪽이었다.

q.front 는 q.top과 동일한 위치이고, pop이 되고,
q.back 은 push가 되는 부분이라고 생각하니 이런 오해가 생겼다.

밑은 이해를 위한 실행 결과이다. 직관적으로 보이도록 노력은 했으나 이해가 안되는 부분을 위해서 설명을 첨부한다.

출력되는 순서대로 설명을 하면

pq에 들어가있는 curDist값과, 현재 구한 최소값인 dist[cur]을 비교한다.
왜 넣었냐면 continue를 한지 확인하기 위해서다. curDist가 dist[cur]보다 크면 continue 할 것이고, 그것을 출력한다.

for(adj[n])은 n의 인접 노드의 가중치를 curDist에 더해 pushed pq에 넣는다.

curDist 는 노드 1부터 현재 n까지의 최소 거리 가중치이다.

pushed pq 에 x 표시 된것은 dist가 더 커서 pq에 push되지 못한 것이다.

sorted pq는 현재 pq에 정렬되어 있는 값을 출력한 것이다.
------
  이해를 위한 실행 결과

  예제 입력
4 6
1 2 3
2 3 3
3 4 1
1 3 5
2 4 5
1 4 4
2 3

priority_queue<pair<int, int>, vector<pair<int,int>>, greater<>> pq

custDist 0 dist[cur] 0
for(adj[1])
curDist 0
pushed pq = (
{3, 2}
{5, 3}
{4, 4}
)
sorted pq = (
{3, 2}
{4, 4}
{5, 3}
)

custDist 3 dist[cur] 3
for(adj[2])
curDist 3
pushed pq = (
{6, 1} x dist[1] = 0
{6, 3} x dist[3] = 5
{8, 4} x dist[4] = 4
)
sorted pq = (
{4, 4}
{5, 3}
)

custDist 4 dist[cur] 4
for(adj[4])
curDist 4
pushed pq = (
{5, 3} x dist[3] = 5
{9, 2} x dist[2] = 3
{8, 1} x dist[1] = 0
)
sorted pq = (
{5, 3}
)

custDist 5 dist[cur] 5
for(adj[3])
curDist 5
pushed pq = (
{8, 2} x dist[2] = 3
{6, 4} x dist[4] = 4
{10, 1} x dist[1] = 0
)
sorted pq = (
)