codeforces/contests/div4/1003
------
codeforces/contests/div4/1003
https://codeforces.com/contest/2065
------
codeforces/contests/div4/1003
A.cpp
  아이디어
문자열 S의 뒤에는 항상 문자열 us를 포함하고 있다.
그 us를 문자 i로 바꾸는 문제다.
문자열 S의 맨 뒤의 문자열 두개를 지우고, i를 추가하면 된다.
위를 구현하면 된다.

B.cpp
  아이디어
문자열 s는 소문자 라틴어로 구성되어 있다. s는 1개 이상의 문자가 포함되어 있다.
연산은 다음과 같다.
1. s[i] == s[i + 1]인 경우 s[i]를 어떤 소문자 라틴어로 변경할 수 있고, s[i + 1]은 지운다.
s가 가질 수 있는 최소 길이를 구해야 한다. 몇 번이던지 연산을 수행할 수 있다.

  경우의 수
1. s[i] == s[i + 1]인 i가 문자열에 존재하지 않는 경우
이 때는 연산을 한 번도 할 수 없으므로 답은 s의 길이와 같다.

2. s[i] == s[i + 1]인 i가 문자열에 존재하는 경우
연산의 내용은 다음과 같다. s[i + 1]은 지워진다. 그리고 s[i]를 원하는 문자로 변경할 수 있다.
2-1. 우선 연산을 하기 전에 s[i]를 s[i - 1], s[i + 2] 둘 중 하나로 변경한다. 어떤 것이든 상관 없다.
2-2. 만약 둘 중 하나가 배열의 인덱스 범위 밖이라면 나머지 하나를 고르면 된다.
2-3. 만약 둘 다 배열의 인덱스 범위 밖이라면 문자열의 길이는 2이고, i는 0일 때이다.
이 때는 어떤 문자로든지 변경하고 s[i + 1]을 지우면 문자열의 길이는 1이된다.

설명한 순서는 달랐지만 구현을 할 때는 2-3, 2-2, 2-1의 순서로 조건을 지키며 연산을 반복한다면 
결과적으로 문자열의 길이를 항상 1로 만들 수 있다.
위를 구현하면 된다.