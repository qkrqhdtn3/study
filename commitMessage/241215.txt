implementation/2444.cpp ★기억에 남는 문제
https://www.acmicpc.net/problem/2444
------
  문제 해결 아이디어
예제를 보고 규칙을 유추한 별 찍기 유형이다.
보이는 감상을 단순하게 해석하면 별 찍기 규칙은 마름모 모양이다.
한눈에 확실한 구현 방법이 바로 떠오르진 않고,
경우를 나누면 반복문이 4개는 넘을듯 해서 설계없이 구현하려고 하기보다는
설계 단계에서 경우의 수를 조금씩 나눠 구현하면 더 빠르고 쉬울것 같다.

1 ~ n 번째 줄까지 공백이 n - 1 ~ 0개가 있고,
n + 1 ~ 2 * n - 1 번째 줄까지 공백이 1 ~ n - 1개가 있다.
따라서 밑과 같이 두가지로 경우를 나눈다.
1. 1 ~ n 번째 줄
2. n + 1 ~ 2 * n - 1 번째 줄

출력의 세로 부분은 i 기반 반복문으로,
가로 부분은 j 기반 반복문으로 i를 사용해 구현할 것이다.

  1. 1 ~ n 번째 줄
for(i = 1 ; i <= n ; i++)

1-1. 공백 부분은 n - 1 ~ 0 개이다.
i = 1 일 때 j == n - 1 개, i = 2 일 때 j == n - 2 개이므로,
초기식은 j = n - i에서 시작하고, 
증감식은 j--이고, 
조건식은 j >= 1이면 될 것이다.
for(j = n - i ; j >= 1 ; j--)

1-2. * 부분은 1 ~ 2 * n - 1 개이다.
i = 1 일 때 j == 1 개, i = 2 일 때 j == 3 개이고,
* 개수인 j 값은 2 * i 와 관계가 있다.
초기식은 j = 1 에서 시작하고, 
증감식은 j++이고, 
조건식은 j <= 2 * i - 1이면 될 것이다.
for(j = 1 ; j <= 2 * i - 1 ; j++)

  2. n + 1 ~ 2 * n - 1 번째 줄
범위에 모든 값에 n을 빼면 1 ~ n - 1 번째 줄과 같다.
for(i = 1 ; i <= n - 1 ; i++)

2-1. 공백 부분은 1 ~ n - 1 개이다.
위에서 풀이한 순서와 같이 풀면
for(j = 1 ; j <= i ; j++)

2-2. * 부분은 2 * ( n - 1 ) - 1 ~ 1개이다.
i = 1 일 때 j == 2 * n - 3 개, i = 2 일 때 j == 2 * n - 5 개 이고,
* 개수인 j 값은 - 2 * i 와 관계가 있다.
초기식은 j = 2 * n - 1 - 2 * i 에서 시작하고, 
증감식은 j--이고, 
조건식은 j >= 1이면 될 것이다.
for(j = 2 * n - 1 - 2 * i ; j >= 1 ; j--)

------
  피드백
문제를 풀 때 직관과 직감으로 푸는 것도 중요하다.
확실하게 배우는 것도 중요할 때가 있다고 생각한다.
어떻게 설계해야 될지 감이 안 올 때는
설계 단계에서 적어가며 하나씩 해결하면 생각보다 간단해지고,
설계 실력도 기를 수 있다.